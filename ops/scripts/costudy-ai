#!/bin/bash
# CoStudy AI - Quick CLI for content generation
# Makes it easy to generate content without remembering long commands

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Load environment if available
if [ -f "ops/.env.local" ]; then
  source ops/.env.local
fi

show_help() {
  echo "CoStudy AI - Fortune-100 Content Generation CLI"
  echo ""
  echo "Usage: costudy-ai <command> [options]"
  echo ""
  echo "Commands:"
  echo "  blog <topic>              Generate blog post about topic"
  echo "  spec <issue#>             Generate tech spec from GitHub issue"
  echo "  proposal <university> <students>  Generate sales proposal"
  echo "  package <topic>           Generate complete content package"
  echo "  help <topic>              Generate help article"
  echo "  job <title>               Generate job description"
  echo "  costs [period]            Show cost report"
  echo "  setup                     Quick setup wizard"
  echo ""
  echo "Examples:"
  echo "  costudy-ai blog \"AI in Education 2025\""
  echo "  costudy-ai spec 42"
  echo "  costudy-ai proposal \"Stanford\" 17000"
  echo "  costudy-ai package \"Student Collaboration\""
  echo "  costudy-ai costs month"
  echo ""
  echo "Options:"
  echo "  --help, -h                Show this help message"
  echo "  --version                 Show version"
}

check_api_keys() {
  if [ -z "$OPENAI_API_KEY" ]; then
    echo -e "${RED}❌ Error: OPENAI_API_KEY not set${NC}"
    echo ""
    echo "Set up your API key:"
    echo "  1. Get key from https://platform.openai.com/api-keys"
    echo "  2. export OPENAI_API_KEY=\"sk-...\""
    echo ""
    echo "Or run: costudy-ai setup"
    exit 1
  fi
}

setup_wizard() {
  echo -e "${BLUE}🚀 CoStudy AI Setup Wizard${NC}"
  echo "=================================="
  echo ""

  # Check if .env.local exists
  if [ -f "ops/.env.local" ]; then
    echo -e "${YELLOW}⚠️  ops/.env.local already exists${NC}"
    read -p "Overwrite? (y/N): " overwrite
    if [ "$overwrite" != "y" ] && [ "$overwrite" != "Y" ]; then
      echo "Setup cancelled"
      exit 0
    fi
  fi

  echo "Let's set up your API keys..."
  echo ""

  # OpenAI (required)
  echo -e "${GREEN}OpenAI API Key (REQUIRED)${NC}"
  echo "Get from: https://platform.openai.com/api-keys"
  read -p "Enter OpenAI API key: " openai_key

  if [ -z "$openai_key" ]; then
    echo -e "${RED}❌ OpenAI API key required${NC}"
    exit 1
  fi

  # Anthropic (optional)
  echo ""
  echo -e "${GREEN}Anthropic Claude API Key (OPTIONAL - for best quality)${NC}"
  echo "Get from: https://console.anthropic.com/settings/keys"
  read -p "Enter Anthropic API key (or press Enter to skip): " anthropic_key

  # Create .env.local
  cat > ops/.env.local <<EOF
# CoStudy AI Configuration
# Generated: $(date)

# Required
export OPENAI_API_KEY="$openai_key"

# Optional (for best quality)
EOF

  if [ -n "$anthropic_key" ]; then
    echo "export ANTHROPIC_API_KEY=\"$anthropic_key\"" >> ops/.env.local
  else
    echo "# export ANTHROPIC_API_KEY=\"sk-ant-...\"" >> ops/.env.local
  fi

  cat >> ops/.env.local <<EOF

# More API keys available in ops/.env.local.example
# Copy additional keys from there if needed
EOF

  chmod 600 ops/.env.local
  source ops/.env.local

  echo ""
  echo -e "${GREEN}✅ Setup complete!${NC}"
  echo ""
  echo "Try generating your first blog post:"
  echo "  costudy-ai blog \"Your Topic Here\""
}

generate_blog() {
  topic="$1"
  if [ -z "$topic" ]; then
    echo -e "${RED}❌ Error: Topic required${NC}"
    echo "Usage: costudy-ai blog \"Your Topic\""
    exit 1
  fi

  check_api_keys

  echo -e "${BLUE}📝 Generating blog post: $topic${NC}"
  echo ""

  ai="auto"
  if [ -n "$ANTHROPIC_API_KEY" ]; then
    ai="claude-opus"
    echo "Using Claude 3 Opus (best quality)"
  else
    ai="gpt-4-turbo"
    echo "Using GPT-4 Turbo"
  fi

  output="content/generated/blog_$(date +%Y%m%d_%H%M%S).json"
  mkdir -p content/generated

  python3 ops/scripts/ultimate_content_generator.py blog \
    --topic "$topic" \
    --keywords "education,students,collaboration" \
    --ai "$ai" \
    --output "$output"

  echo ""
  echo -e "${GREEN}✅ Blog post generated!${NC}"
  echo "   File: $output"
  echo ""
  echo "Preview:"
  jq -r '.content.headline' "$output"
  echo ""
  jq -r '.content.meta_description' "$output"
}

generate_spec() {
  issue_number="$1"
  if [ -z "$issue_number" ]; then
    echo -e "${RED}❌ Error: Issue number required${NC}"
    echo "Usage: costudy-ai spec 42"
    exit 1
  fi

  check_api_keys

  echo -e "${BLUE}🔧 Generating technical specification for issue #$issue_number${NC}"
  echo ""

  ./ops/workflows/generate_tech_spec.sh "$issue_number"
}

generate_proposal() {
  university="$1"
  students="$2"

  if [ -z "$university" ] || [ -z "$students" ]; then
    echo -e "${RED}❌ Error: University and student count required${NC}"
    echo "Usage: costudy-ai proposal \"University Name\" 10000"
    exit 1
  fi

  check_api_keys

  echo -e "${BLUE}💼 Generating sales proposal for $university${NC}"
  echo ""

  ./ops/workflows/generate_sales_proposal.sh "$university" "$students"
}

generate_package() {
  topic="$1"
  if [ -z "$topic" ]; then
    echo -e "${RED}❌ Error: Topic required${NC}"
    echo "Usage: costudy-ai package \"Your Topic\""
    exit 1
  fi

  check_api_keys

  echo -e "${BLUE}📦 Generating complete content package: $topic${NC}"
  echo ""

  ./ops/workflows/complete_content_package.sh "$topic"
}

generate_help_article() {
  topic="$1"
  if [ -z "$topic" ]; then
    echo -e "${RED}❌ Error: Topic required${NC}"
    echo "Usage: costudy-ai help \"How to reset password\""
    exit 1
  fi

  check_api_keys

  echo -e "${BLUE}📚 Generating help article: $topic${NC}"
  echo ""

  output="content/generated/help_$(date +%Y%m%d_%H%M%S).json"
  mkdir -p content/generated

  python3 ops/scripts/ultimate_content_generator.py blog \
    --topic "Support Guide: $topic" \
    --keywords "help,tutorial,guide,support,troubleshooting" \
    --ai gpt-4-turbo \
    --output "$output"

  echo ""
  echo -e "${GREEN}✅ Help article generated!${NC}"
  echo "   File: $output"
}

generate_job() {
  title="$1"
  if [ -z "$title" ]; then
    echo -e "${RED}❌ Error: Job title required${NC}"
    echo "Usage: costudy-ai job \"Senior Full-Stack Engineer\""
    exit 1
  fi

  check_api_keys

  echo -e "${BLUE}👔 Generating job description: $title${NC}"
  echo ""

  ai="auto"
  if [ -n "$ANTHROPIC_API_KEY" ]; then
    ai="claude-opus"
  else
    ai="gpt-4-turbo"
  fi

  output="content/generated/job_$(date +%Y%m%d_%H%M%S).json"
  mkdir -p content/generated

  python3 ops/scripts/ultimate_content_generator.py blog \
    --topic "Job Description: $title at CoStudy" \
    --keywords "job,career,hiring,$title,remote" \
    --ai "$ai" \
    --output "$output"

  echo ""
  echo -e "${GREEN}✅ Job description generated!${NC}"
  echo "   File: $output"
}

show_costs() {
  period="${1:-month}"

  echo -e "${BLUE}💰 Cost Report${NC}"
  echo ""

  python3 ops/scripts/track_costs.py --period "$period"
}

# Main command dispatcher
command="$1"
shift || true

case "$command" in
  blog)
    generate_blog "$@"
    ;;
  spec)
    generate_spec "$@"
    ;;
  proposal)
    generate_proposal "$@"
    ;;
  package)
    generate_package "$@"
    ;;
  help-article|help)
    generate_help_article "$@"
    ;;
  job)
    generate_job "$@"
    ;;
  costs)
    show_costs "$@"
    ;;
  setup)
    setup_wizard
    ;;
  --version)
    echo "CoStudy AI v1.0.0"
    ;;
  --help|-h|"")
    show_help
    ;;
  *)
    echo -e "${RED}❌ Unknown command: $command${NC}"
    echo ""
    show_help
    exit 1
    ;;
esac
