#!/usr/bin/env python3
"""
Spec Writer Bot - Generates technical specifications from GitHub issues

Usage:
    python spec_writer.py --issue 123
    python spec_writer.py --issue 123 --output spec.md
"""

import os
import sys
import click
from pathlib import Path
from dotenv import load_dotenv
from github import Github
from openai import OpenAI

# Load environment variables
load_dotenv()

# Configuration
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = os.getenv("GITHUB_REPO", "brock-nelson/costudy-website")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")
OPENAI_MAX_TOKENS = int(os.getenv("OPENAI_MAX_TOKENS", "4000"))

# Paths
SCRIPT_DIR = Path(__file__).parent
PROMPTS_DIR = SCRIPT_DIR.parent / "prompts"
OUTPUT_DIR = SCRIPT_DIR.parent / "output"


def load_prompt(prompt_name: str) -> str:
    """Load a prompt template from the prompts directory"""
    prompt_path = PROMPTS_DIR / prompt_name
    if not prompt_path.exists():
        raise FileNotFoundError(f"Prompt file not found: {prompt_path}")

    with open(prompt_path, 'r', encoding='utf-8') as f:
        return f.read()


def get_issue_info(repo, issue_number: int) -> dict:
    """Fetch issue information from GitHub"""
    try:
        issue = repo.get_issue(issue_number)

        # Get labels
        labels = [label.name for label in issue.labels]

        return {
            'number': issue.number,
            'title': issue.title,
            'body': issue.body or "No description provided.",
            'labels': labels,
            'author': issue.user.login,
            'created_at': issue.created_at.isoformat(),
            'url': issue.html_url
        }
    except Exception as e:
        print(f"Error fetching issue #{issue_number}: {e}", file=sys.stderr)
        sys.exit(1)


def generate_spec(issue_info: dict, spec_prompt: str) -> str:
    """Generate a technical specification using OpenAI"""

    # Build the context for the AI
    context = f"""
You are generating a technical specification for the following GitHub issue:

**Issue #{issue_info['number']}: {issue_info['title']}**

**Description:**
{issue_info['body']}

**Labels:** {', '.join(issue_info['labels']) if issue_info['labels'] else 'None'}
**Author:** {issue_info['author']}
**Created:** {issue_info['created_at']}

Generate a comprehensive technical specification following the format and guidelines in the prompt.
Be specific, actionable, and thorough. Consider the existing CoStudy tech stack (Next.js 15, TypeScript, Drizzle ORM, Supabase).
"""

    try:
        client = OpenAI(api_key=OPENAI_API_KEY)

        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": spec_prompt},
                {"role": "user", "content": context}
            ],
            max_tokens=OPENAI_MAX_TOKENS,
            temperature=0.7
        )

        spec_content = response.choices[0].message.content
        return spec_content

    except Exception as e:
        print(f"Error generating spec with OpenAI: {e}", file=sys.stderr)
        sys.exit(1)


def post_spec_to_issue(repo, issue_number: int, spec_content: str):
    """Post the generated spec as a comment on the GitHub issue"""
    try:
        issue = repo.get_issue(issue_number)

        comment_body = f"""## ðŸ¤– Generated Technical Specification

{spec_content}

---

*This specification was automatically generated by the CoStudy AI Bot. Please review and provide feedback or request changes as needed.*

**Next Steps:**
1. Review the spec for accuracy and completeness
2. Request changes if needed by commenting
3. Once approved, label this issue as `spec-ready` and `dev-ready` to begin implementation
"""

        issue.create_comment(comment_body)
        print(f"âœ“ Posted spec to issue #{issue_number}")

        # Update labels
        current_labels = [label.name for label in issue.labels]
        if 'needs-spec' in current_labels:
            issue.remove_from_labels('needs-spec')
            print(f"âœ“ Removed 'needs-spec' label")

        issue.add_to_labels('spec-ready')
        print(f"âœ“ Added 'spec-ready' label")

    except Exception as e:
        print(f"Error posting spec to issue: {e}", file=sys.stderr)
        sys.exit(1)


def save_spec_to_file(spec_content: str, output_path: Path):
    """Save the generated spec to a file"""
    try:
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(spec_content)
        print(f"âœ“ Saved spec to {output_path}")
    except Exception as e:
        print(f"Error saving spec to file: {e}", file=sys.stderr)
        sys.exit(1)


@click.command()
@click.option('--issue', '-i', required=True, type=int, help='GitHub issue number')
@click.option('--output', '-o', type=click.Path(), help='Output file path (optional)')
@click.option('--no-post', is_flag=True, help='Do not post to GitHub (local generation only)')
@click.option('--debug', is_flag=True, help='Enable debug output')
def main(issue: int, output: str, no_post: bool, debug: bool):
    """Generate a technical specification from a GitHub issue"""

    # Validate environment
    if not OPENAI_API_KEY:
        print("Error: OPENAI_API_KEY not set in environment", file=sys.stderr)
        sys.exit(1)

    if not GITHUB_TOKEN and not no_post:
        print("Error: GITHUB_TOKEN not set in environment", file=sys.stderr)
        sys.exit(1)

    print(f"ðŸ¤– CoStudy Spec Writer Bot")
    print(f"{'='*50}")
    print(f"Issue: #{issue}")
    print(f"Repository: {GITHUB_REPO}")
    print()

    # Load the spec writer prompt
    print("Loading spec writer prompt...")
    spec_prompt = load_prompt("spec_writer_prompt.md")
    if debug:
        print(f"âœ“ Loaded prompt ({len(spec_prompt)} characters)")

    # Connect to GitHub
    print(f"Fetching issue #{issue}...")
    github_client = Github(GITHUB_TOKEN)
    repo = github_client.get_repo(GITHUB_REPO)
    issue_info = get_issue_info(repo, issue)

    print(f"âœ“ Issue: {issue_info['title']}")
    print(f"  Labels: {', '.join(issue_info['labels']) if issue_info['labels'] else 'None'}")
    print()

    # Generate the spec
    print("Generating specification with AI...")
    print("(This may take 30-60 seconds)")
    spec_content = generate_spec(issue_info, spec_prompt)

    print(f"âœ“ Generated spec ({len(spec_content)} characters)")
    print()

    # Save to file if requested
    if output:
        output_path = Path(output)
        save_spec_to_file(spec_content, output_path)
    else:
        # Save to default location
        default_output = OUTPUT_DIR / f"spec-{issue}.md"
        save_spec_to_file(spec_content, default_output)

    # Post to GitHub unless --no-post
    if not no_post:
        print("Posting spec to GitHub issue...")
        post_spec_to_issue(repo, issue, spec_content)
    else:
        print("Skipped posting to GitHub (--no-post flag set)")

    print()
    print("âœ… Done!")
    print()
    print(f"View issue: {issue_info['url']}")


if __name__ == "__main__":
    main()
