name: Vercel Deployment Monitor

# Monitors Vercel deployments and creates GitHub issues for failures
# Runs after each push to main or pull request
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  monitor-deployment:
    runs-on: ubuntu-latest
    # Wait 5 minutes for Vercel to deploy
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Vercel deployment
        id: wait
        run: |
          echo "Waiting 3 minutes for Vercel to start deployment..."
          sleep 180

      - name: Check Vercel deployment status
        id: check-deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest commit SHA
          COMMIT_SHA="${{ github.sha }}"
          echo "Checking deployment status for commit: $COMMIT_SHA"

          # Check GitHub deployment status
          DEPLOYMENT_STATUS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/deployments" \
            | jq -r '.[0].statuses_url' | xargs curl -s -H "Authorization: token $GITHUB_TOKEN" \
            | jq -r '.[0].state')

          echo "deployment_status=$DEPLOYMENT_STATUS" >> $GITHUB_OUTPUT
          echo "Deployment status: $DEPLOYMENT_STATUS"

      - name: Fetch Vercel deployment logs
        id: fetch-logs
        if: steps.check-deployment.outputs.deployment_status == 'failure' || steps.check-deployment.outputs.deployment_status == 'error'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get deployment URL from GitHub deployments API
          DEPLOYMENT_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/deployments" \
            | jq -r '.[0].payload.web_url // "No URL available"')

          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

          # Note: Vercel CLI would be needed for detailed logs
          # For now, we'll capture what we can from GitHub API
          echo "Deployment failed. Check Vercel dashboard for detailed logs."
          echo "Deployment URL: $DEPLOYMENT_URL"

      - name: Create GitHub issue for deployment failure
        if: steps.check-deployment.outputs.deployment_status == 'failure' || steps.check-deployment.outputs.deployment_status == 'error'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Deployment Failed: ${context.payload.head_commit?.message || 'Unknown commit'}`,
              body: `## Deployment Failure Report

            **Commit:** ${context.sha}
            **Branch:** ${context.ref}
            **Triggered by:** ${context.actor}
            **Time:** ${new Date().toISOString()}

            ### Deployment Status
            Status: \`${{ steps.check-deployment.outputs.deployment_status }}\`

            ### Deployment URL
            ${{ steps.fetch-logs.outputs.deployment_url }}

            ### Commit Details
            \`\`\`
            ${{ github.event.head_commit.message }}
            \`\`\`

            ### What to Check:
            1. **Vercel Dashboard**: Check build logs at [Vercel Dashboard](https://vercel.com)
            2. **Environment Variables**: Verify all required env vars are set correctly
            3. **Build Errors**: Look for TypeScript, ESLint, or build errors
            4. **Runtime Errors**: Check for server-side initialization errors

            ### Common Issues:
            - Missing or malformed environment variables
            - TypeScript compilation errors
            - Dependency conflicts
            - Database connection issues
            - Redis connection issues (check for whitespace in env vars)

            ### Actions Needed:
            - [ ] Review Vercel deployment logs
            - [ ] Fix underlying issue
            - [ ] Verify fix locally
            - [ ] Redeploy

            ---

            ðŸ¤– Auto-generated by Deployment Monitor

            /cc @brock-nelson - Please review this deployment failure.`,
              labels: ['deployment-failure', 'high-priority', 'bug']
            });

            console.log(`Created issue #${issue.data.number}`);

      - name: Report success
        if: steps.check-deployment.outputs.deployment_status == 'success'
        run: |
          echo "âœ… Deployment successful!"
          echo "Status: ${{ steps.check-deployment.outputs.deployment_status }}"
