name: Auto Technical Specification Generation

on:
  issues:
    types: [labeled]

jobs:
  generate-spec:
    # Only run when issue gets the "needs-spec" label
    if: github.event.label.name == 'needs-spec'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          pip install openai anthropic requests

      - name: Create specs directory
        run: |
          mkdir -p specs

      - name: Generate technical specification
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "Generating spec for issue #$ISSUE_NUMBER: $ISSUE_TITLE"

          # Create comprehensive spec prompt
          SPEC_TOPIC="Technical Specification: $ISSUE_TITLE

          Context from GitHub Issue #$ISSUE_NUMBER:
          $ISSUE_BODY

          Generate a comprehensive technical specification including:
          1. Overview and Objectives
          2. System Architecture
          3. Technical Requirements
          4. API Design (if applicable)
          5. Database Schema (if applicable)
          6. Security Considerations
          7. Testing Strategy
          8. Implementation Plan with milestones
          9. Acceptance Criteria
          10. Dependencies and Risks"

          python3 ops/scripts/ultimate_content_generator.py blog \
            --topic "$SPEC_TOPIC" \
            --keywords "technical specification,architecture,system design,engineering" \
            --ai gpt-4-turbo \
            --output "specs/spec_issue_$ISSUE_NUMBER.json"

      - name: Comment on issue with spec
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        with:
          script: |
            const fs = require('fs');
            const issueNumber = process.env.ISSUE_NUMBER;
            const specPath = `specs/spec_issue_${issueNumber}.json`;

            // Read generated spec
            const spec = JSON.parse(fs.readFileSync(specPath, 'utf8'));
            const cost = spec.cost || 'N/A';

            // Extract preview
            const headline = spec.content?.headline || 'Technical Specification';
            const preview = spec.content?.introduction || '';

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## 📋 Technical Specification Generated

            **Specification:** \`specs/spec_issue_${issueNumber}.json\`

            ### Preview:
            **${headline}**

            ${preview.substring(0, 500)}${preview.length > 500 ? '...' : ''}

            ### 📄 Full Specification Sections:
            - ✅ Overview and Objectives
            - ✅ System Architecture
            - ✅ Technical Requirements
            - ✅ API Design
            - ✅ Database Schema
            - ✅ Security Considerations
            - ✅ Testing Strategy
            - ✅ Implementation Plan
            - ✅ Acceptance Criteria

            ### 💰 Generation Cost: $${cost}

            ### 🎯 Next Steps:
            1. Review the generated specification in \`specs/spec_issue_${issueNumber}.json\`
            2. Refine technical details as needed
            3. Add team-specific requirements
            4. Share with engineering team for feedback
            5. Use as foundation for implementation

            ---
            🤖 Auto-generated by [CoStudy AI Stack](https://github.com/${context.repo.owner}/${context.repo.repo})`
            });

      - name: Remove needs-spec label
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        with:
          script: |
            const issueNumber = process.env.ISSUE_NUMBER;
            github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              name: 'needs-spec'
            });

      - name: Add has-spec label
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        with:
          script: |
            const issueNumber = process.env.ISSUE_NUMBER;
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['has-spec']
            });

      - name: Create pull request with spec
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            specs: Add technical specification for issue #${{ github.event.issue.number }}

            Auto-generated specification from GitHub issue.

            Issue: ${{ github.event.issue.title }}
            🤖 Generated with AI Stack
          branch: auto/spec-${{ github.event.issue.number }}
          title: '[Auto] Spec for #${{ github.event.issue.number }}: ${{ github.event.issue.title }}'
          body: |
            ## 📋 Technical Specification

            **Issue:** #${{ github.event.issue.number }}
            **Title:** ${{ github.event.issue.title }}

            ### 📄 Generated File:
            - `specs/spec_issue_${{ github.event.issue.number }}.json`

            ### ✅ Review Checklist:
            - [ ] Architecture approach is sound
            - [ ] All technical requirements covered
            - [ ] Security considerations addressed
            - [ ] Testing strategy is comprehensive
            - [ ] Implementation plan is realistic
            - [ ] Acceptance criteria are clear

            ### 🎯 Next Steps:
            1. Engineering team reviews specification
            2. Refine technical details
            3. Merge PR to store spec in repo
            4. Begin implementation

            ---
            🤖 Auto-generated from issue #${{ github.event.issue.number }}
          labels: |
            automated
            specification
            engineering
          assignees: brock-nelson

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `⚠️ **Spec Generation Failed**

              The automated specification generation workflow failed.

              [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})

              Please try again or generate spec manually:
              \`\`\`bash
              ./ops/workflows/generate_tech_spec.sh ${context.payload.issue.number}
              \`\`\`
              `
            })
